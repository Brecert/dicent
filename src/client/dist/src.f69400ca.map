{"version":3,"sources":["ws/query.ts","ws/protocol.ts","../../util/mixin.ts","../../util/Emitter.ts","ws/socket.ts","ws/handler.ts","ws/index.ts","index.tsx"],"names":[],"mappings":"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","file":"src.f69400ca.map","sourceRoot":"../src","sourcesContent":["export enum Query {\n  Initial,\n  Resposne,\n  Message\n}\n","import { Query } from './query'\n\nexport interface RawSocket<T> {\n  e: number,\n  v: number,\n  q: Query,\n  d?: T\n}\n\nexport class SocketProtocol<T> {\n  constructor(\n    public error: number,\n    public version: number,\n    public query: Query,\n    public data?: T\n  ) {}\n\n  toJSON(): RawSocket<T> {\n    const res: RawSocket<T> = {\n      e: this.error,\n      v: this.version,\n      q: this.query\n    }\n    if(this.data) res.d = this.data\n    return res\n  }\n}","export const mix = (superclass) => new MixinBuilder(superclass)\n\nclass MixinBuilder {  \n  constructor(public superclass) {}\n\n  with(...mixins) {\n    return mixins.reduce((c, mixin) => mixin(c), this.superclass)\n  }\n}","export const Emitter = (superclass) => class extends superclass {\n  /**\n   * The listeners of the node\n   */\n  _listeners: Map<any, any> = new Map();\n\n  /**\n   * Create a reciever\n   */\n  on(listener, cb: <U>(data: U) => void) {\n    if (!(listener in this._listeners)) {\n      this._listeners[listener] = [];\n    }\n    this._listeners[listener].push(cb);\n  }\n\n  /**\n   * Remove the reciever\n   */\n  remove(listener) {\n    if (listener in this._listeners) {\n      delete this._listeners[listener]\n    }\n  }\n\n  /**\n   * dispatch an event\n   */\n  dispatch<T, U>(listener, data: U) {\n    if (listener in this._listeners) {\n      this._listeners[listener].forEach(cb => {\n        cb(data);\n      });\n    }\n  }\n}","import { mix } from '../../../util/mixin'\nimport { Emitter } from '../../../util/Emitter'\nimport { SocketProtocol } from './protocol'\nimport { Query } from './query'\n\nexport class Socket extends mix(WebSocket).with(Emitter) {\n  constructor(url, ...protocols) {\n    super(url, protocols)\n\n    this.onmessage = (event) => {\n      const res = JSON.parse(event.data)\n\n      // todo: translate to query code to a string\n      // trigger the query code\n      this.trigger(res['q'], res)\n    }\n  }\n\n\n  sendProtocol = <T>(protcol: SocketProtocol<T>) => {\n    this.send(JSON.stringify(protcol))\n  }\n}","import { SocketProtocol } from './protocol'\nimport { Socket } from './socket'\nimport { Query } from './query'\n\n\nexport class MessageProtocol {\n  constructor(public message: string, public id: number = 0, public timestamp: number = Date.now()) {}\n}\n\nexport class SocketHandler extends Socket {\n  MESSAGE = new SocketProtocol(0, 1, Query.Message)\n\n  sendMessage(msg: string) {\n    this.MESSAGE.data = new MessageProtocol(msg)\n    this.sendProtocol(this.MESSAGE)\n  }\n}","export * from './query'\nexport * from './protocol'\nexport * from './socket'\nexport * from './handler'","import dom from '../../util/dom'\nimport { Query, SocketHandler } from './ws/index'\n\nconst ws = new SocketHandler('ws://localhost:7777')\nws.on(Query.Message, msg => {\n\tconsole.log(msg)\n})"]}